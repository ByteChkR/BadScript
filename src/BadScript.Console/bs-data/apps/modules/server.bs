

//Load interfaces
json = environment.loadInterface("json", {})
fs = environment.loadInterface("fs", {})
string = environment.loadInterface("string", {})
path = environment.loadInterface("path", {})


//Parse Arguments
prefix = args[0] + args[1]
rootPath = args[1]
moduleDir = path.getFullPath(args[2])
enableSetEndpoint = 1
if(args.size() == 4 &&
	args[3] == "--no-set")
{
	enableSetEndpoint = 0
}


//Set Local Path to temp dir
tempPath = path.combine(path.getAppPath(), "bs-data", "app-data")
tempServerPath = path.combine(tempPath, "modules-server")
fs.createDir(tempServerPath)

//Install(or Load) Module System Client to be able to require modules
environment.loadString(environment.loadInterface("http", {}).downloadString("http://static.byt3.dev/apps/BadScript/modules-core/modules_install.bs")).loadAt(tempServerPath)

//load http-server module
server = modules.require("http-server")


function sendResponse(response, body)
{	
	response.writeBody(json.toJson(body))
	response.close()
}

function sendError(response, message)
{
	body = {
		error = message
	}
	sendResponse(response, body)
}

function getModuleList()
{
	dirs = fs.getDirectories(moduleDir, "*")
	r = []
	foreach dir in dirs
	{
		r.add(path.getFileName(dir))
	}
	return r
}



//Define Endpoint "/list?filter="
function epListModules(ctx)
{
	request = ctx.request()
	list = getModuleList()
	body = list
	if(hasKey(request.query, "filter"))
	{
		filter = request.query.filter[0]
		r = []
		foreach module in list
		{
			if(string.startsWith(module, filter))
			{
				r.add(module)
			}
		}
		body = r
	}
	response = ctx.response()
	response.writeBody(json.toJson(body))
	response.close()
}

function getModule(!name)
{
	list = getModuleList()
	foreach	module in list
	{
		if(name == module)
		{
			return fs.readAll(path.combine(moduleDir, name, name + ".bs"))
		}
	}
}

function epGetModule(ctx)
{
	request = ctx.request()
	response = ctx.response()
	if(hasKey(request.query, "name"))
	{
		name = request.query.name[0]
		src = getModule(name)
		if(src == null)
		{
			sendError(response, "Could not find Module: " + name)
		}
		else
		{
			body = {
				name = name,
				src = src
			}
			sendResponse(response, body)
		}
	}
	else
	{
		sendError(response, "No Module Name Specified")
	}
}

function setModuleData(!name, !data)
{
	exists = 0
	modDir = path.combine(moduleDir, name)
	moduleFile = path.combine(modDir, name + ".bs")
	fs.createDir(modDir)
	if(fs.exists(moduleFile))
	{
		exists = 1
		fs.delete(moduleFile)
	}
	fs.writeAll(moduleFile, data)
	return exists
}

function epSetModule(ctx)
{
	request = ctx.request()
	response = ctx.response()

	if(enableSetEndpoint == 0)
	{
		body = {
			status = "Unauthorized Access!"
		}
		sendResponse(response, body)
		return null
	}

	if(hasKey(request.query, "name"))
	{
		name = request.query.name[0]
		if(hasKey(request.query, "data"))
		{
			isUpdate = setModuleData(name, request.query.data[0])
			body = {
				status = "Success"
			}
			if(isUpdate)
			{
				body.status = body.status + "(Updated)"
			}
			sendResponse(response, body)
		}
		else
		{
			sendError(response, "No Data Supplied")
		}
	}
	else
	{
		sendError(response, "No Module Name Specified")
	}
	
}

listUrl = rootPath + "list"
print("Adding Endpoint: "+listUrl)
server.add(listUrl, epListModules)

getUrl = rootPath + "get"
print("Adding Endpoint: " + getUrl)
server.add(getUrl, epGetModule)

setUrl = rootPath + "set"
print("Adding Endpoint: " + setUrl)
server.add(setUrl, epSetModule)

server.start([prefix])