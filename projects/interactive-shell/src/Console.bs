namespace InteractiveShell.Console
{
	using InteractiveShell.Internal

	#ASSERT_INTERFACE_AVAILABLE(String)

	String = Environment.LoadInterface("String")

	class InteractiveShellConsoleCommand
	{
		Name = null
		Instance = null
		function InteractiveShellConsoleCommand(!name)
		{
			Name = name
		}

		function RunCommand(!args)
		{
			Environment.Error("Command '" + Name + "' does not implement 'InteractiveShellConsoleCommand.RunCommand(!args)'")
		}

	}

	class InteractiveShellConsole
	{
		_prefix = null
		_shell = null
		_commands = null
		_currentStr = null
		_exitLoop = false
		_writeReturn = true
		function InteractiveShellConsole(!prefix)
		{
			_prefix = prefix ?? ""
			_shell = new InteractiveShell()
			_commands = []
			_currentStr = ""
			LoadPlugins()
		}

		function AddCommand(!cmd)
		{
			#ASSERT_TYPE(cmd)

			if(!cmd.IsInstanceOf("InteractiveShellConsoleCommand"))
			{
				error(cmd + "has to inherit from ConsoleCommand")
			}

			cmd.Instance = this
			Console.WriteLine("New Command: " + cmd.ToString())
			_commands.Add(cmd)
		}

		function RunCommand(argLine)
		{
			#ASSERT_STRING(argLine)
			cmdArgs = String.Split(argLine, " ")
			if(cmdArgs.Size() == 0)
			{
				return false
			}

			cmdName = cmdArgs[0]
			cmdArgs.RemoveAt(0)
			foreach cmd in _commands
			{
				if(cmd.Name == cmdName)
				{
					Console.WriteLine("Found Command: "	+ cmd.Name)
					cmd.RunCommand(cmdArgs)
					return true
				}
			}

			return false

		}

		function Exit()
		{
			_exitLoop = true
		}

		function Clear()
		{
			_currentStr = ""
		}

		function Execute(argLine)
		{
			#ASSERT_STRING(argLine)

			
			execute = false
			if(!String.EndsWith(argLine, "\\"))
			{
				_currentStr += argLine
				execute = true
			}
			else
			{
				_currentStr += String.Remove(argLine, String.Length(argLine) - 1, 1)
			}

			if(execute)
			{
				o = _shell.RunCommand(_currentStr)
				if(_writeReturn || o.IsError)
				{
					Console.WriteLine("Returned: " + o.ToString())
				}
				_currentStr = ""
			}
			
		}

		function Loop()
		{
			_exitLoop = false
			while(!_exitLoop)
			{
				Console.Write(_prefix)
				cmd = Console.ReadLine()
				Run(cmd)
			}
		}

		function Run(argLine)
		{
			#ASSERT_STRING(argLine)
			if(!RunCommand(argLine))
			{
				Execute(argLine)
			}			
		}


		function LoadPlugins()
		{
			FileSystem = Environment.LoadInterface("FileSystem", {})
			Path = Environment.LoadInterface("Path", {})

			pluginPath = Path.Combine(App.Manifest.PersistentPath, "plugins")
			FileSystem.CreateDir(pluginPath)

			files = FileSystem.GetFiles(pluginPath, "*.bs", true)
			Console.WriteLine("Loading " + files.Size() + " Plugins")
			foreach file in files
			{
				name = Path.GetFileName(file)
				Console.WriteLine("Loading Plugin: " + name)
				try
				{
					Environment.LoadString(FileSystem.ReadAll(file), this)
				}
				catch(e)
				{
					Console.WriteLine("Loading Plugin: " + name + " Failed!(" + e.message + ")")
				}
			}
		}
	}

}