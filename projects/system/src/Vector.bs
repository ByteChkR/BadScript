

namespace System.Vectors
{
	Math = Environment.LoadInterface("Math", {})
	class Vector4
	{
		X = 0
		Y = 0
		Z = 0
		W = 0
		function Vector4(x, y, z, w)
		{
			X = x
			Y = y
			Z = z
			W = w
		}

		function Add(other)
		{
			return new Vector4(
				X + other.X,
				Y + other.Y,
				Z + other.Z,
				W + other.W)
		}

		function Sub(other)
		{
			return new Vector4(
				X - other.X,
				Y - other.Y,
				Z - other.Z,
				W - other.W)
		}

		function Scale(scalar)
		{
			return new Vector4(
				X * scalar,
				Y * scalar,
				Z * scalar,
				W * scalar)
		}

		function SqrMagnitude()
		{
			return X + Y + Z + W
		}

		function Magnitude()
		{
			return Math.Sqrt(SqrMagnitude())
		}

		function Normalized()
		{
			return Scale(1 / Magnitude())
		}

		function op_Addition(other)
		{
			if(Convert.IsType(other))
			{
				return Add(other)
			}
			else
			{
				Console.WriteLine(Debug(other))
				Environment.Error("Can only Add a Vector with a Vector.")
			}
		}

		function op_Subtraction(other)
		{
			if(Convert.IsType(other))
			{
				return Sub(other)
			}
			else
			{
				Environment.Error("Can only Add a Vector with a Vector.")
			}
		}

		function op_Multiply(other)
		{
			if(Convert.IsType(other))
			{
				Environment.Error("Can not Multiply Two Vectors. Right side has to be scalar")
			}
			else
			{
				return Scale(other)
			}
		}

		function op_Division(other)
		{
			if(Convert.IsType(other))
			{
				Environment.Error("Can not Multiply Two Vectors. Right side has to be scalar")
			}
			else
			{
				return Scale(1 / other)
			}
		}

		function op_Equality(other)
		{
			if(Convert.IsType(other))
			{
				return	X == other.X &&
						Y == other.Y &&
						Z == other.Z &&
						W == other.W
			}
			return false
		}

		function op_Inequality(other)
		{
			return op_Equals(other) == false
		}

	}

	class Vector3 : Vector4
	{
		function Vector3(x, y, z) : base(x, y, z, 0) {}
	}


	class Vector2 : Vector3
	{
		function Vector2(x, y) : base(x, y, 0) {}
	}

}