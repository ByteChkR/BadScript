namespace System
{
	class Event
	{
		_listeners = []
		_argcount = 0
		_collectReturns = false
		function Event(?argc, ?aggregateReturns)
		{
			_argcount = argc
			if(_argcount == null)
			{
				_argcount = 0
			}

			_collectReturns = aggregateReturns
			if(_collectReturns == null)
			{
				_collectReturns = false
			}
		}


		function AddListener(event)
		{
			if(Convert.IsFunction(event))
			{
				_listeners.Add(event)
				return this
			}
			Environment.Error("Can not add '" + Debug(event) + "' to Event Handler")
		}

		function RemoveListener(event)
		{
			if(Convert.IsFunction(event))
			{
				_listeners.Remove(event)
				return this
			}
			Environment.Error("Can not remove '" + Debug(event) + "' from Event Handler")
		}

		function Invoke(*args)
		{

			if(args.Size() != _argcount)
			{
				Environment.Error("Invalid Argument Count. Expected: " + _argcount + " but got " + args.Size())
				return null
			}
			if(_collectReturns)
			{
				r = []
				foreach subscriber in _listeners
				{
					sr = subscriber.Invoke(args)
					r.Add(sr)
				}
				return r
			}

			foreach subscriber in _listeners
			{
				subscriber.Invoke(args)
			}
			return null
		}

		function ClearListeners() => _listeners.Clear()
		op_SelfAddition = AddListener
		op_SelfSubtraction = RemoveListener
		op_Invoke = Invoke
	}
}