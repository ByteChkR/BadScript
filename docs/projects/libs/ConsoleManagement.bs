 namespace ConsoleManagement { Environment.LoadInterface("Path") Environment.LoadInterface("FileSystem") class ConsoleManager { function GetDataPath() => return Path.Combine(Path.GetAppPath(), "data") function GetIncludePath() => return Path.Combine(GetDataPath(), "include") function Copy(!fileToAdd, !outDir) { if(fileToAdd == null) { Environment.Error("Assertion Failed. var is NULL.") } if(!Convert.IsString(fileToAdd)) { Environment.Error("Assertion Failed. var is not a string. Actual Value: " + fileToAdd) } if(outDir == null) { Environment.Error("Assertion Failed. var is NULL.") } if(!Convert.IsString(outDir)) { Environment.Error("Assertion Failed. var is not a string. Actual Value: " + outDir) } if(!FileSystem.Exists(fileToAdd)) { Console.WriteLine($"File '{fileToAdd}' can not be found.") } else { outFile = Path.Combine(outDir, Path.GetFileName(fileToAdd)) FileSystem.Copy(fileToAdd, outFile) } } function AddInclude(!fileToAdd) { Copy(fileToAdd, GetIncludePath()) } function GetPreprocessorPath() => return Path.Combine(GetDataPath(), "preprocessor") function GetPreprocessorIncludePath() => return Path.Combine(GetPreprocessorPath(), "include") function AddPreprocessorInclude(!fileToAdd) { Copy(fileToAdd, GetPreprocessorIncludePath()) } function GetPreprocessorDirectivePath() => return Path.Combine(GetPreprocessorPath(), "directives") function AddPreprocessorDirective(!fileToAdd) { Copy(fileToAdd, GetPreprocessorDirectivePath()) } } } 