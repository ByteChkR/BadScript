xml = Environment.LoadInterface("Xml")
fs = Environment.LoadInterface("FileSystem")
path = Environment.LoadInterface("Path")
versioning = Environment.LoadInterface("Versioning")

function loadCSProject(p)
{
	return xml.CreateDoc(fs.ReadAll(p))
}

function getProjectVersion(projDoc)
{
	projNode = projDoc.FindChild("Project")
	propNode = projNode.FindChild("PropertyGroup")
	versionNode = propNode.FindChild("Version")
	return versionNode
}

function setProjectVersion(projDoc, version)
{
	projNode = projDoc.FindChild("Project")
	propNode = projNode.FindChild("PropertyGroup")
	versionNode = propNode.FindChild("Version")
	versionNode.InnerText = version
}

function updateProjectVersion(p)
{
	verFmt = "(~){yyyy}.(~){MM}.(~){dd}.+"
	doc = loadCSProject(p)
	version = getProjectVersion(doc)

	oldVersion = versioning.Parse(version.InnerText)
	newVersion = oldVersion.Change(verFmt)


	str = path.GetFileNameWithoutExtension(p) + ": " + oldVersion + " => " + newVersion
	
	Console.WriteLine(str)

	setProjectVersion(doc, newVersion)

	fs.WriteAll(p, doc.ToString())
}

if(args.Size() == 1)
{
	Console.WriteLine("Directory: " + args[0])
	files = fs.GetFiles(args[0], "*.csproj", true)
	foreach file in files
	{
		updateProjectVersion(file)
	}
	return null
}


Console.WriteLine("Write 'exit' to quit")
while(true)
{
	Console.WriteLine("CS Project Path: ")
	url = Console.ReadLine()
	if(url == "exit")
	{
		break
	}
	if(fs.Exists(url))
	{
		if(fs.IsFile(url))
		{
			updateProjectVersion(url)
		}
		else
		{
			files = fs.GetFiles(url, "*.csproj", 1)
			foreach file in files
			{
				updateProjectVersion(file)
			}
		}
	}
	else
	{
		Console.WriteLine("File does not exist!")
	}
}

return null
