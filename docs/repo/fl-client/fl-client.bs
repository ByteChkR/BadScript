
http = environment.loadInterface("http")
string = environment.loadInterface("string")
json = environment.loadInterface("json")
logging = modules.require("logging")
log = logging.create("FL-Client")


function safeGet(!url)
{
	response = http.get(url)
	if(response.status != 200)
	{
		error("Invalid Response Code: " + response.status + " from URL: " + url)
	}
	return response.body
}

api = {}
api.getVersion = function() => return "0.0.0.1"
api.printVersion = function() => log("FLClient Version: " + api.getVersion())
api.create = function(!uri)
{
	client = {}
	client.uri = uri
	client.getVersions = function(!filter)
	{
		endpoint = client.uri + "/versions?filter=" + filter
		response = safeGet(endpoint)

		versions = json.fromJson(response)
		return versions.libs
	}

	client.printInfo = function()
	{
		log("FLServer Info:")
		log("\tFLServer URL: " + client.uri)
		log("\tFLServer Versions:")
		versions = client.getVersions("")
		foreach lib in versions
		{
			log("\t\t" + lib.name + " : " + lib.version)
		}
	}

	client.getInstructions = function(!filter)
	{
		endpoint = client.uri + "/instructions?filter=" + filter
		response = safeGet(endpoint)

		instructions = json.fromJson(response)
		return instructions.instructions
	}

	client.printInstructions = function()
	{
		log("Instructions:")
		response = client.getInstructions("")
		foreach instruction in response
		{
			log("\t"+instruction.name)
			log("\t\t"+instruction.desc)
			log("\t\t"+instruction.params)
		}
	}

	client.run = function(!source, !width, !height)
	{
		endpoint = string.format("{0}/run?source={1}&width={2}&height={3}", client.uri, escape(source), width, height)
		//print(endpoint)
		response = safeGet(endpoint)
		runObj = json.fromJson(response)
		return base64.from(runObj.result)
	}




	return client

}

return api