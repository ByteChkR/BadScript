namespace BadShell.Commands
{
	class RunScriptCustomAliasResolver : CustomAliasResolver
	{
		FileSystem = null
		Console = null
		ProcessInfo = null
		function RunScriptCustomAliasResolver(!fileSystem, !console, !pinfo)
		{
			FileSystem = fileSystem
			Console = console
			ProcessInfo = pinfo
		}

		function Resolve(!target)
		{
			target.Args.Insert(0, target.Target)
			target.Target = "bs"
		}

		function CanResolve(!target)
		{
			if(FileSystem.Exists(FileSystem.GetRootNode(), ProcessInfo.ResolvePath(target.Target)) && String.EndsWith(target.Target, ".bs"))
			{
				return true
			}
			return false
		}
	}

	class RunScriptCommand : ShellCommand
	{
		FileSystem = null
		Concurrency = null
		ProcessInfo = null
		Logger = null
		function RunScriptCommand(!pinfo ,!fileSystem, !concurrencySystem, !logger)
		{
			FileSystem = fileSystem
			Concurrency = concurrencySystem
			ProcessInfo = pinfo
			Logger = logger
		}
		function GetName()
		{
			return "bs"
		}

		function GetHelp()
		{
			return "Runs a BadScript File"
		}

		function RunCommand(*args)
		{
			if(args.Size() == 0)
			{
				return null
			}
			user = ProcessInfo.GetUser()
			file = args[0]
			file = ProcessInfo.ResolvePath(file)
			node = FileSystem.FindNode(FileSystem.GetRootNode(), file)
			if(node.IsFile())
			{
				src = node.ReadAllText(user)
				proc = Concurrency.StartSynchronousProcess(user, src, args, ProcessInfo.GetWorkingDirectory(), file)
			}
			else
			{
				Environment.Error($"{file} is not a File")
			}
			return null
		}
	}
}