namespace BadOS.Core.EventSystem
{
	class EventSystem
	{
		
		_eventQueue = []
		_handlerMap = {}
		function AddHandler(!handler)
		{
			#ASSERT_INSTANCE_OF(EventHandler, handler)
			if(HasHandlerKey(handler.GetEventKey()))
			{
				_handlerMap[handler.GetEventKey()].Add(handler)
			}
			else
			{
				_handlerMap[handler.GetEventKey()] = [handler]
			}
		}

		function HasHandlerKey(!key)
		{
			#ASSERT_STRING(key)
			foreach k in _handlerMap
			{
				if(k == key)
				{
					return true
				}
			}
			return false
		}

		function SendEvent(!ev)
		{
			#ASSERT_INSTANCE_OF(Event, ev)
			_eventQueue.Add(ev)
		}

		function GetPublicApi()
		{
			t = {
				SendEvent = SendEvent,
				AddHandler = AddHandler
			}
			return t
		}

		function ProcessEvents(?maxEvents)
		{
			eventCount = 0
			if(maxEvents == null)
			{
				maxEvents = 1000
			}

			#ASSERT_NUMBER(maxEvents)

			while(eventCount < maxEvents && _eventQueue.Size() != 0)
			{
				ev = _eventQueue[0]
				_eventQueue.RemoveAt(0)
				eventCount += 1

				if(HasHandlerKey(ev.GetEventKey()))
				{
					handlers = _handlerMap[ev.GetEventKey()]
					foreach handler in handlers
					{
						handler.ProcessEvent(ev)
					}
				}
			}
		}

	}
}