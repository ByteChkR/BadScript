namespace BadOS.Core.Extensions
{

	class ExtensionCore : Extension
	{
		function GetName()
		{
			return "BadOS.Core.Extensions.CoreExtension"
		}

		function GetVersion()
		{
			return "1.0.0.0"
		}

		function GetAccessRight()
		{
			return $"{GetName()}.Access"
		}


		function HasExtension(!user, !name)
		{
			if(user.HasRight(GetName() + ".Access.CheckExtensions"))
			{
				return _Host.HasExtension(name)
			}
			else
			{
				Environment.Error($"User '{user.GetName()}' does not have the right '{GetName()}.Access.CheckExtensions'")
			}
			return null
		}

		function HasNewerExtension(!user, !extension)
		{
			if(user.HasRight(GetName() + ".Access.CheckExtensions"))
			{
				return _Host.HasNewerExtension(name)
			}
			else
			{
				Environment.Error($"User '{user.GetName()}' does not have the right '{GetName()}.Access.CheckExtensions'")
			}
			return null
		}

		function GetExtension(!user, !name)
		{
			if(user.HasRight(GetName() + ".Access.GetExtension"))
			{
				ext = _Host.GetExtension(name)
				acRight = ext.GetAccessRight()
				if(acRight == null)
				{					
					Environment.Error($"Access Right can not be Null: {Environment.Debug(ext)}")
				}
				if(!user.HasRight(acRight))
				{
					Environment.Error($"User '{user.GetName()}' does not have the right '{ext.GetAccessRight()}'")
				}
				else
				{
					return ext
				}
			}
			else
			{
				Environment.Error($"User '{user.GetName()}' does not have the right '{GetName()}.Access.GetExtension'")
			}
			return null
		}

		function AddExtensionIfNewer(!user, !extension)
		{
			if(user.HasRight(GetName() + ".Access.AddExtension"))
			{
				return _Host.AddExtensionIfNewer(extension)
			}
			else
			{
				Environment.Error($"User '{user.GetName()}' does not have the right '{GetName()}.Access.AddExtension'")
			}
			return null
		}

		function AddExtension(!user, !extension)
		{
			if(user.HasRight(GetName() + ".Access.AddExtension"))
			{
				return _Host.AddExtensionIfNewer(extension)
			}
			else
			{
				Environment.Error($"User '{user.GetName()}' does not have the right '{GetName()}.Access.AddExtension'")
			}
			return null
		}


		function OnInitializationFinished()
		{
			root = _Host.GetExtension("BadOS.Extensions.UserManagement").GetRoot()
			root.AddRight(GetName() + ".Access.AddExtension")
			root.AddRight(GetName() + ".Access.GetExtension")
			root.AddRight(GetName() + ".Access.CheckExtensions")
		}

		function GetPublicInterface()
		{
			t = base.GetPublicInterface()
			t.GetExtension = GetExtension
			t.HasExtension = HasExtension
			t.AddExtensionIfNewer = AddExtensionIfNewer
			t.AddExtension = AddExtension
			t.HasNewerExtension = HasNewerExtension
			return t
		}
	}

	class ExtensionHost
	{
		_Extensions = []
		_ShutdownHandlers = []
		_EventSystem = null
		function ExtensionHost(!eventSystem)
		{
			_EventSystem = eventSystem
		}
		function GetEventSystem()
		{
			return _EventSystem
		}

		function RegisterShutdownHandler(!fnc)
		{
			_ShutdownHandlers.Add(fnc)
		}

		function OnShutdown()
		{
			foreach handler in _ShutdownHandlers
			{
				handler()
			}
		}

		function SendInitializationFinished()
		{
			foreach ext in _Extensions
			{
				ext.OnInitializationFinished()
			}
		}

		function HasExtension(!name)
		{
			#ASSERT_STRING(name)
			foreach ext in _Extensions
			{
				if(ext.GetName() == name)
				{
					return true
				}
			}
			return false
		}

		function HasNewerExtension(!extension)
		{
			#ASSERT_INSTANCE_OF(Extension, extension)
			foreach ext in _Extensions
			{
				if(ext.GetName() == extension.GetName() && ext.GetVersion() >= extension.GetVersion())
				{
					return true
				}
			}
			return false
		}

		function GetExtension(!name)
		{
			#ASSERT_STRING(name)
			foreach ext in _Extensions
			{
				if(ext.GetName() == name)
				{
					return ext.GetPublicInterface()
				}
			}
			return null
		}

		function InnerAddExtension(!extension)
		{
			#ASSERT_INSTANCE_OF(Extension, extension)
			extension.Initialize(this)
		}

		function AddExtensionIfNewer(!extension)
		{
			#ASSERT_INSTANCE_OF(Extension, extension)
			if(!HasNewerExtension(extension))
			{
				_Extensions.Add(extension)
				InnerAddExtension(extension)
			}
		}

		function AddExtension(!extension)
		{
			#ASSERT_INSTANCE_OF(Extension, extension)
			if(!HasExtension(extension.GetName()))
			{
				_Extensions.Add(extension)
				InnerAddExtension(extension)
			}
		}
	}

	class Extension
	{
		_Host = null
		function GetName()
		{

		}

		function GetVersion()
		{

		}

		function GetAccessRight()
		{

		}

		function Initialize(!host)
		{
			#ASSERT_INSTANCE_OF(ExtensionHost, host)
			_Host = host
		}

		function OnInitializationFinished()
		{

		}

		function GetPublicInterface()
		{
			t = {
				GetName = GetName,
				GetVersion = GetVersion,
				GetAccessRight = GetAccessRight,
				GetPublicInterface = function() => return t
			}
			return t
		}
	}
}