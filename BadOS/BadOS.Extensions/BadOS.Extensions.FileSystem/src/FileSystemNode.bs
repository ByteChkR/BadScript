namespace BadOS.Extensions.FileSystem
{
	class FileSystemNode
	{
		_OwnerUID = -1
		_Name = null
		_Parent = null
		_FileSystem = null
		_IsDeleted = false
		_Logger = null


		function GetOwnerUID() => return _OwnerUID
		function GetName() => return _Name
		function GetParent() => return _Parent
		function GetFullName()
		{
			s = InnerRecursiveGetName()
			if(s == "")
			{
				return "/"
			}
			return s
		}

		function InnerRecursiveGetName()
		{
			if(_Parent != null)
			{
				return $"{_Parent.InnerRecursiveGetName()}/{GetName()}"
			}
			return ""
		}

		function GetFileSystem()
		{
			if(_FileSystem == null)
			{
				return _Parent.GetFileSystem()
			}
			return _FileSystem
		}
		function GetFileSystemLink()
		{
			if(_FileSystem != null)
			{
				return this
			}
			return _Parent.GetFileSystemLink()
		}

		function IsDirectory() => return false
		function IsFile() => return false
		function IsLink() => return false
		function IsFileSystemLink() => return false
		function IsDeleted() => return _IsDeleted

		function ChangePublic(!user, ?recursive)
		{
			if(user.GetUID() == GetOwnerUID())
			{
				if(user.HasRight("BadOS.Extensions.FileSystem.ChangeOwner.Own"))
				{
					_OwnerUID = -1
				}
				else
				{
					_Logger.Error($"Access Forbidden {GetFullName()}")
				}
			}
			else if(user.HasRight("BadOS.Extensions.FileSystem.ChangeOwner.All"))
			{
					_OwnerUID = -1
			}
			else
			{
				_Logger.Error($"Access Forbidden {GetFullName()}")
			}
		}
		
		function ChangeOwner(!user, !targetUser, ?recursive)
		{
			if(user.GetUID() == GetOwnerUID())
			{
				if(user.HasRight("BadOS.Extensions.FileSystem.ChangeOwner.Own"))
				{
					_OwnerUID = targetUser.GetUID()
				}
				else
				{
					_Logger.Error($"Access Forbidden {GetFullName()}")
				}
			}
			else if(user.HasRight("BadOS.Extensions.FileSystem.ChangeOwner.All"))
			{
				_OwnerUID = targetUser.GetUID()
			}
			else
			{
				_Logger.Error($"Access Forbidden {GetFullName()}")
			}
		}


		function Delete(!user, ?recursive)
		{
			if(user.GetUID() == GetOwnerUID())
			{
				if(user.HasRight("BadOS.Extensions.FileSystem.Delete.Own"))
				{
					if(recursive == null)
					{
						recursive = false
					}
					#ASSERT_BOOL(recursive)
					parent = GetParent()

					fs = GetFileSystem()
					if(fs != null)
					{
						fs.Delete(fs.ResolveNode(this), recursive)
					}
					if(parent != null)
					{
						parent.OnDeleteChild(this)
					}
				}
				else
				{
					_Logger.Error($"Access Forbidden {GetFullName()}")
				}
			}
			else
			{
				else if(user.HasRight("BadOS.Extensions.FileSystem.Delete.All"))
				{
					if(recursive == null)
					{
						recursive = false
					}
					#ASSERT_BOOL(recursive)
					parent = GetParent()

					fs = GetFileSystem()
					if(fs != null)
					{
						fs.Delete(fs.ResolveNode(this), recursive)
					}
					if(parent != null)
					{
						parent.OnDeleteChild(this)
					}
				}
				else
				{
					_Logger.Error($"Access Forbidden {GetFullName()}")
				}
			}
		}

		function GetDebugString(node)
		{
			name = node.GetFullName()
			type = "["
			if(node.IsFile())
			{
				type += "F"
			}
			else
			{
				type += "-"
			}
			if(node.IsDirectory())
			{
				type += "D"
			}
			else
			{
				type += "-"
			}
			if(node.IsLink())
			{
				type += "L-"
			}
			else if(node.IsFileSystemLink())
			{
				type += "LX"
			}
			else
			{
				type += "--"
			}

			type += "]"
			return $"Type: {type} Owner: {node.GetOwnerUID()} Name: '{node.GetName()}'"
		}
	}

}