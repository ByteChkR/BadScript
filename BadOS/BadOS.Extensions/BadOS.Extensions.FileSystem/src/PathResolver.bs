namespace BadOS.Extensions.FileSystem
{
	class PathResolver
	{
		function PathResolver()
		{
		}

		function GetFileName(!path)
		{
			#ASSERT_STRING(path)
			if(path == "/")
			{
				Environment.Error("Can not get parent directory path of '/'")
			}

			idx = String.LastIndexOf(path, "/")
			if(idx == -1)
			{
				Environment.Error($"Can not get parent directory path of {path}")
			}

			return String.Remove(path, 0, idx+1)
		}

		function GetDirectoryPath(!path)
		{
			#ASSERT_STRING(path)
			if(path == "/")
			{
				Environment.Error("Can not get parent directory path of '/'")
			}

			idx = String.LastIndexOf(path, "/")
			if(idx == -1)
			{
				Environment.Error($"Can not get parent directory path of {path}")
			}

			return String.Substr(path, 0, idx)
		}

		function ResolvePath(!path, ?currentPath)
		{
			#ASSERT_STRING(path)
			if(path == "/")
			{
				return path
			}
			if(currentPath == null)
			{
				currentPath = "/"
			}
			#ASSERT_STRING(currentPath)
			parts = String.Split(currentPath, "/")
			i = parts.Size()
			relativeParts = String.Split(path, "/")
			if(String.StartsWith(path, "/"))
			{
				parts = relativeParts
			}
			else
			{
				foreach	relPath in relativeParts
				{
					parts.Add(relPath)
				}
			}
			

			while(i < parts.Size())
			{
				if(i <= 0)
				{
					Environment.Error("Path Resolver Failed")
				}
				part = parts[i]
				if(part == "..")
				{
					parts.RemoveAt(i)
					parts.RemoveAt(i-1)
					i -= 1
				}
				else if(part == "." || part == "")
				{
					parts.RemoveAt(i)
				}
				else
				{
					i += 1
					if(i >= parts.Size())
					{
						return CombineParts(parts)
					}
				}
			}
			return CombineParts(parts)
		}

		function CombineParts(!parts)
		{
			#ASSERT_ARRAY(parts)
			s = "/"
			for i = 0 while< parts.Size()
			{
				if(parts[i] == "")
				{
					continue
				}
				if(i == parts.Size() - 1)
				{
					s += parts[i]
				}
				else
				{
					s += $"{parts[i]}/"
				}
			}
			return s
		}
	}
}