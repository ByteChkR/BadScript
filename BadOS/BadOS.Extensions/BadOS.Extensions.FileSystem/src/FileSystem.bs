
namespace BadOS.Extensions.FileSystem
{

	class FileSystem
	{
		function ResolveNode(!target, ?name)
		{
			if(name != null)
			{
				#ASSERT_STRING(name)
				return TranslatePath(target.GetFullName() + "/" + name)
			}
			return TranslatePath(target.GetFullName())
		}
		function ReverseResolveNode(!target, ?name)
		{
			if(name != null)
			{
				#ASSERT_STRING(name)
				return ReversePath(target.GetFullName() + "/" + name)
			}
			return ReversePath(target.GetFullName())
		}

		function TranslatePath(!path)
		{
			#ASSERT_STRING(path)
			return path
		}
		function ReversePath(!path)
		{
			#ASSERT_STRING(path)
			return path
		}

		function GetName() => Environment.Error("Not Supported")
		function ReadAllText(!path)
		{
			Environment.Error("Not Supported")
		}

		function ReadAllLines(!path)
		{
			Environment.Error("Not Supported")
		}

		function OpenReadWrite(!path)
		{
			Environment.Error("Not Supported")
		}

		function OpenRead(!path)
		{
			#ASSERT_STRING(path)
			Environment.Error("Not Supported")
		}

		function Delete(!path, ?recursive)
		{
			#ASSERT_STRING(path)
			if(recursive == null)
			{
				recursive = false
			}
			#ASSERT_BOOL(recursive)
			Environment.Error("Not Supported")
		}


		function GetFiles(!path)
		{
			#ASSERT_STRING(path)
			Environment.Error("Not Supported")
		}

		function GetDirectories(!path)
		{
			#ASSERT_STRING(path)
			Environment.Error("Not Supported")
		}

		function CreateFile(!path)
		{
			#ASSERT_STRING(path)
			Environment.Error("Not Supported")
		}

		function CreateDir(!path)
		{
			#ASSERT_STRING(path)
			Environment.Error("Not Supported")
		}

		function GetEntryUID(!path)
		{
			#ASSERT_STRING(path)
			Environment.Error("Not Supported")
		}
	}


	class IOFileSystem : FileSystem
	{
		_RootPath = null
		_EnvFileSystem = null
		_EnvPath = null
		_FsName = null
		function GetName() => return _FsName
		function IOFileSystem(!environment, !rootPath, ?fsName)
		{
			if(fsName == null)
			{
				_FsName = "fs0"
			}
			else
			{
				#ASSERT_STRING(fsName)
				_FsName = fsName
			}
			_RootPath = rootPath
			_EnvFileSystem = environment.LoadInterface("FileSystem", {})
			_EnvPath = environment.LoadInterface("Path", {})
		}

		function ResolveNode(!target, ?name)
		{
			relativeNode = target.GetFileSystemLink()
			fullTarget = "/" + String.Remove(target.GetFullName(), 0, String.Length(relativeNode.GetFullName()))
			if(String.EndsWith(fullTarget, "/"))
			{
				fullTarget = String.Remove(fullTarget, String.Length(fullTarget)-1, 1)
			}
			if(name != null)
			{
				#ASSERT_STRING(name)
				return TranslatePath(fullTarget+ "/" + name)
			}
			return TranslatePath(fullTarget)
		}
		function ReverseResolveNode(!target, ?name)
		{
			relativeNode = target.GetFileSystemLink()
			fullTarget = "/" + String.Remove(target.GetFullName(), 0, String.Length(relativeNode.GetFullName()))
			if(String.EndsWith(fullTarget, "/"))
			{
				fullTarget = String.Remove(fullTarget, String.Length(fullTarget)-1, 1)
			}
			if(name != null)
			{
				#ASSERT_STRING(name)
				return ReversePath(fullTarget+ "/" + name)
			}
			return ReversePath(fullTarget)
		}


		function TranslatePath(!path)
		{
			#ASSERT_STRING(path)
			
			p= $"{_RootPath}{path}"

			return p
		}

		function ReversePath(!path)
		{
			#ASSERT_STRING(path)
			s = String.Remove(path, 0, String.Length(_RootPath))
			return s
		}

		function ReadAllText(!path)
		{
			#ASSERT_STRING(path)
			return _EnvFileSystem.ReadAll(path)
		}

		function ReadAllLines(!path)
		{
			#ASSERT_STRING(path)
			return String.Split(_EnvFileSystem.ReadAll(path), "\n")
		}
		function WriteAllText(!path, !text)
		{
			#ASSERT_STRING(path)
			#ASSERT_STRING(text)
			return _EnvFileSystem.WriteAll(path, text)
		}

		function WriteAllLines(!path, !lines)
		{
			#ASSERT_STRING(path)
			#ASSERT_ARRAY(lines)
			text = ""
			foreach line in lines
			{
				#ASSERT_STRING(line)
				text += line + "\n"
			}
			return _EnvFileSystem.WriteAll(path, text)
		}

		function Open(!path)
		{
			#ASSERT_STRING(path)
			return _EnvFileSystem.Open(path)
		}

		function GetFiles(!path)
		{

			#ASSERT_STRING(path)
			files =  _EnvFileSystem.GetFiles(path)

			ret = []
			for i = 0 while< files.Size()
			{
				file = String.Replace(String.Remove(files[i], 0, String.Length(path)), "\\", "/")
				if(String.StartsWith(file, "/"))
				{
					file = String.Remove(file, 0, 1)
				}
				ret.Add(file)
			}

			return ret
		}

		function GetDirectories(!path)
		{
			#ASSERT_STRING(path)
			dirs =  _EnvFileSystem.GetDirectories(path)

			ret = []
			for i = 0 while< dirs.Size()
			{
				dir = String.Replace(String.Remove(dirs[i], 0, String.Length(path)), "\\", "/")
				
				if(String.StartsWith(dir, "/"))
				{
					dir = String.Remove(dir, 0, 1)
				}
				ret.Add(dir)

			}

			return ret
		}


		function CreateFile(!path)
		{
			#ASSERT_STRING(path)
			return _EnvFileSystem.WriteAll(path, "")
		}
		
		function CreateDir(!path)
		{
			#ASSERT_STRING(path)
			return _EnvFileSystem.CreateDir(path)
		}
	}
}
