
namespace BadOS.Extensions.FileSystem
{

	class Directory : FileSystemNode
	{
		_Children = []

		function ToString()
		{
			return GetDebugString(this)
		}
		function IsDirectory() => return true
		
		function GetChildCount()
		{
			return _Children.Size()
		}

		function GetChildAt(i)
		{
			child = _Children[i]
			while(child.IsLink())
			{
				child = child.ResolveLink()
			}
			return child
		}
		function GetUnresolvedChildAt(i)
		{
			child = _Children[i]
			return child
		}

		function HasChild(!name)
		{
			#ASSERT_STRING(name)
			return GetChild(name) != null
		}

		function GetChild(!name)
		{
			#ASSERT_STRING(name)
			for i = 0 while< _Children.Size()
			{
				child = _Children[i]
				if(child.GetName() == name)
				{
					while(child.IsLink())
					{
						child = child.ResolveLink()
					}
					return child
				}
			}
			return null
		}

		function ChangePublic(!user, ?recursive) : base(user, recursive)
		{
			if(recursive == null)
			{
				recursive = false
			}
			
			#ASSERT_BOOL(recursive)
			if(recursive)
			{
				for i = 0 while< _Children.Size()
				{
					child = _Children[i]
					child.ChangePublic(user, recursive)
				}
			}
		}

		function ChangeOwner(!user, !targetUser, ?recursive) : base(user, targetUser, recursive)
		{
			if(recursive == null)
			{
				recursive = false
			}
			
			#ASSERT_BOOL(recursive)
			if(recursive)
			{
				for i = 0 while< _Children.Size()
				{
					child = _Children[i]
					child.ChangeOwner(user, targetUser, recursive)
				}
			}
		}

		function InnerCreateFile(!name)
		{
			#ASSERT_STRING(name)
			child = GetChild(name)
			if(child == null)
			{
				node = new File()
				node._Logger = _Logger
				node._OwnerUID = GetOwnerUID()
				node._Name = name
				node._Parent = this
				_Children.Add(node)
				return node
			}
			else
			{
				Environment.Error($"Entry '{name}' already exists in directory '{GetFullName()}'")
				return null
			}
		}

		function InnerCreateDirectory(!name)
		{
			#ASSERT_STRING(name)
			child = GetChild(name)
			if(child == null)
			{
				
				node = new Directory()
				node._Logger = _Logger
				node._OwnerUID = GetOwnerUID()
				node._Name = name
				node._Parent = this
				_Children.Add(node)
				return node
			}
			else if(child.IsDirectory())
			{
				return child
			}
			return null
		}

		function CreateDirectory(!user, !name)
		{
			if(user.GetUID() == GetOwnerUID())
			{
				if(user.HasRight("BadOS.Extensions.FileSystem.CreateEntries.Own"))
				{
					#ASSERT_STRING(name)
					node = InnerCreateDirectory(name)
					fs = node.GetFileSystem()

					fs.CreateDir(fs.ResolveNode(node))
					return node
				}
				_Logger.Error($"Access Forbidden {GetFullName()}")
				return null
			}
			else if(GetOwnerUID() == -1 || user.HasRight("BadOS.Extensions.FileSystem.CreateEntries.All"))
			{
				#ASSERT_STRING(name)
				node = InnerCreateDirectory(name)
				fs = node.GetFileSystem()

				fs.CreateDir(fs.ResolveNode(node))
				return node
			}
			else
			{
				_Logger.Error($"Access Forbidden {GetFullName()}")
				return null
			}
		}

		function CreateFile(!user,!name)
		{
			if(user.GetUID() == GetOwnerUID())
			{
				if(user.HasRight("BadOS.Extensions.FileSystem.CreateEntries.Own"))
				{
					#ASSERT_STRING(name)
					node = InnerCreateFile(name)
					fs = node.GetFileSystem()
					fs.CreateFile(fs.ResolveNode(node))
					return node
				}
				else
				{
					_Logger.Error($"Access Forbidden {GetFullName()}")
					return null
				}
			}
			else if(GetOwnerUID() == -1 || user.HasRight("BadOS.Extensions.FileSystem.CreateEntries.All"))
			{
				#ASSERT_STRING(name)
				node = InnerCreateFile(name)
				fs = node.GetFileSystem()
				fs.CreateFile(fs.ResolveNode(node))
				return node
			}
			else
			{
				_Logger.Error($"Access Forbidden {GetFullName()}")
				return null
			}
		}

		function CreateLink(!user, !name, !targetNode)
		{
			if(user.GetUID() == GetOwnerUID())
			{
				if(user.HasRight("BadOS.Extensions.FileSystem.CreateEntries.Own"))
				{
					#ASSERT_STRING(name)
					#ASSERT_INSTANCE_OF(FileSystemNode, targetNode)
					child = GetChild(name)
					if(child == null)
					{
						_Logger.Log($"Creating Link: {GetFullName()}/{name} => {targetNode.GetFullName()}")
						node = new Link()

						node._Logger = _Logger
						node._OwnerUID = GetOwnerUID()
						node._Name = name
						node._Parent = this
						node._LinkedNode = targetNode
						_Children.Add(node)
						return node
					}
					else
					{
						Environment.Error($"Entry '{name}' already exists in directory '{GetFullName()}'")
						return null
					}
				}
				else
				{
					_Logger.Error($"Access Forbidden {GetFullName()}")
					return null
				}
			}
			else if(GetOwnerUID() == -1 || user.HasRight("BadOS.Extensions.FileSystem.CreateEntries.All"))
			{
				#ASSERT_STRING(name)
				#ASSERT_INSTANCE_OF(FileSystemNode, targetNode)
				child = GetChild(name)
				if(child == null)
				{
					_Logger.Log($"Creating Link: {GetFullName()}/{name} => {targetNode.GetFullName()}")
					node = new Link()

					node._Logger = _Logger
					node._OwnerUID = GetOwnerUID()
					node._Name = name
					node._Parent = this
					node._LinkedNode = targetNode
					_Children.Add(node)
					return node
				}
				else
				{
					Environment.Error($"Entry '{name}' already exists in directory '{GetFullName()}'")
					return null
				}
			}
			else
			{
				_Logger.Error($"Access Forbidden {GetFullName()}")
				return null
			}

		}

		function MountFileSystem(!user, !name, !fileSystem)
		{
			if(user.GetUID() == GetOwnerUID())
			{
				if(user.HasRight("BadOS.Extensions.FileSystem.CreateEntries.Own"))
				{
					#ASSERT_STRING(name)
					#ASSERT_INSTANCE_OF(FileSystem, fileSystem)
					node = GetChild(name)
					if(node == null)
					{
						node = new FileSystemLink()

						node._Logger = _Logger
						node._FileSystem = fileSystem
						node._OwnerUID = GetOwnerUID()
						node._Name = name
						node._Parent = this

						_Logger.Log($"Mounting File System '{name}' for UID {user.GetUID()} in '{node.GetFullName()}'")

						_Children.Add(node)

						node.LoadFileSystemEntries()
						return node
					}
					else
					{
						Environment.Error($"Entry '{name}' already exists in directory '{GetFullName()}'")
						return null
					}
				}
				else
				{
					_Logger.Error($"Access Forbidden {GetFullName()}")
					return null
				}
			}
			else if(GetOwnerUID() == -1 || user.HasRight("BadOS.Extensions.FileSystem.CreateEntries.All"))
			{
				#ASSERT_STRING(name)
				#ASSERT_INSTANCE_OF(FileSystem, fileSystem)
				node = GetChild(name)
				if(node == null)
				{
					node = new FileSystemLink()

					node._Logger = _Logger
					node._FileSystem = fileSystem
					node._OwnerUID = GetOwnerUID()
					node._Name = name
					node._Parent = this

					_Logger.Log($"Mounting File System '{name}' for UID {user.GetUID()} in '{node.GetFullName()}'")

					_Children.Add(node)

					node.LoadFileSystemEntries()
					return node
				}
				else
				{
					Environment.Error($"Entry '{name}' already exists in directory '{GetFullName()}'")
					return null
				}
			}
			else
			{
				_Logger.Error($"Access Forbidden {GetFullName()}")
				return null
			}
		}


		function LoadFileSystemEntries()
		{
			fs = GetFileSystem()
			path = fs.ResolveNode(this)
			dirs = fs.GetDirectories(path)
			files = fs.GetFiles(path)

			foreach dir in dirs
			{
				if(!HasChild(dir))
				{
					InnerCreateDirectory(dir).LoadFileSystemEntries()
				}
			}
			foreach file in files
			{
				if(!HasChild(file))
				{
					InnerCreateFile(file)
				}
			}
		}

		function OnDeleteChild(!child)
		{
			_Logger.Log($"Deleting Child '{child.GetFullName()}' from '{GetFullName()}'")
			hasChild = HasChild(child)
			#ASSERT_TRUE(hasChild)
			for i = 0 while< _Children.Size()
			{
				if(child.GetName() == _Children[i].GetName())
				{
					_Children.RemoveAt(i)
					break
				}
			}
		}
	}
}