
namespace BadOS.Extensions.UserManagement
{
	using BadOS.Core.Extensions
	class UserManagementExtension : Extension
	{
		_UserManager = null
		_Root = null
		_logger = null
		_FileSystem = null
		_DisableRootAccess = false
		function UserManagementExtension()
		{
			_UserManager = new UserManager()
		}


		function GetRootUser()
		{
			return _Root
		}

		function CreateUserDirectories(!user)
		{
			fs = _Host.GetExtension("BadOS.Extensions.FileSystem")
			dir = null
			if(!fs.Exists(fs.GetRootNode(), $"/home/{user.GetName()}"))
			{
				dir = fs.CreateDirectory(GetRootUser(), fs.GetRootNode(), $"/home/{user.GetName()}")
			}
			else
			{
				dir = fs.FindNode(fs.GetRootNode(), $"/home/{user.GetName()}")
			}
			dir.ChangeOwner(GetRootUser(), user, false)
		}

		function GetHomeDir()
		{
			path = "/home"
			return _FileSystem.FindNode(_FileSystem.GetRootNode(), path)
		}

		function GetUserHomeDir(!user)
		{
			path = "/home/{user.GetUID()}_{user.GetName()}"
			return _FileSystem.FindNode(_FileSystem.GetRootNode(), path)
		}

		function ImportUsers()
		{
			if(_FileSystem.Exists(_FileSystem.GetRootNode(), "/sys/Users.json"))
			{
				file = _FileSystem.FindNode(_FileSystem.GetRootNode(), "/sys/Users.json")
				users = file.ReadJson(GetRootUser())
				_UserManager.ImportUsers(users)
			}
		}

		function ExportUsers()
		{
			file = _FileSystem.CreateFile(_Root, _FileSystem.GetRootNode(), "/sys/Users.json")
			file.WriteJson(_Root, _UserManager.ExportUsers())
		}

		function OnInitializationFinished()
		{
			_FileSystem = _Host.GetExtension("BadOS.Extensions.FileSystem")

			_DisableRootAccess = true
			ImportUsers()
			foreach user in _UserManager._Users
			{
				CreateUserDirectories(user)
			}
		}

		function Login(!id, !pw)
		{
			#ASSERT_NUMBER(id)
			#ASSERT_STRING(pw)
			user = _UserManager.GetUser(id)
			if(user != null)
			{
				if(user.IsCorrectPassword(pw))
				{
					CreateUserDirectories(user)
					return GetUserInterface(user)
				}
			}
			
			return null
		}

		function WriteErrorMissingRight(user, right)
		{
			_logger.Error($"User '{user.GetName()}' does not have the right '{right}'")
		}

		#EXTENSION_GENERATE_INFO_BODY()

		function CreateRootUser()
		{
			_logger.Info("Adding User 'root'")
			root = _UserManager.AddUser("root")
			root.SetPassword("1234", null)
			_Root = GetUserInterface(root)
			_CurrentUser = _Root
		}

		function Initialize(!host) : base(host)
		{
			l = host.GetExtension("BadOS.Extensions.Logging")
			_logger = l.CreateLogger(GetName())
			_Host.RegisterShutdownHandler(ExportUsers)
			CreateRootUser()
		}


		function AddUser(!user, !userName, ?password)
		{

			if(user.HasRight(GetName() + ".Access.AddUser"))
			{
				if(_DisableRootAccess)
				{
					CreateUserDirectories(user)
				}
				user = _UserManager.AddUser(userName)
				if(password != null)
				{
					#ASSERT_STRING(password)
					user.SetPassword(password, null)
				}
			}
			else
			{
				WriteErrorMissingRight(user, GetName() + ".Access.AddUser")
			}
		}

		function GetUser(!user, !id)
		{
			if(user.HasRight(GetName() + ".Access.GetUser"))
			{
				return GetUserInterface(_UserManager.GetUser(id))
			}
			else
			{
				WriteErrorMissingRight(user, GetName() + ".Access.GetUser")
			}
			return null
		}

		function ResolveToInternalUser(!user)
		{
			return _UserManager.GetUser(user.GetUID())
		}

		function GetUserInterface(!user)
		{
			#ASSERT_INSTANCE_OF(User, user)
			t = {
				GetName = function() => return user.GetName(),
				GetUID = function() => return user.GetUID(),
				GetHomeDir = GetHomeDir,
				GetUserHomeDir = GetUserHomeDir,
				GetRights = user.GetRights,
				Login = function(!id, !pw)
				{
					if(user.HasRight(GetName() + ".Access.Login"))
					{
						return Login(id, pw)
					}
					else
					{
						WriteErrorMissingRight(user, GetName() + ".Access.Login")
					}
					return null
				},
				SetPassword = function(!pw, ?oldPW, ?targetUser)
				{
					if(targetUser == null)
					{
						if(user.HasRight(GetName() + ".Access.Self.SetPassword"))
						{
							user.SetPassword(pw, oldPW)
						}
						else
						{
							WriteErrorMissingRight(user, GetName() + ".Access.Self.SetPassword")
						}
					}
					else
					{
						if(user.GetUID() == targetUser.GetUID())
						{
							if(user.HasRight(GetName() + ".Access.Self.SetPassword"))
							{
								user.SetPassword(pw, oldPW)
							}
							else
							{
								WriteErrorMissingRight(user, GetName() + ".Access.Self.SetPassword")
							}
						}
						else if(user.HasRight(GetName() + ".Access.SetPassword"))
						{
							ResolveToInternalUser(targetUser).SetPassword(pw, oldPW)
							
						}
						else
						{
							WriteErrorMissingRight(user, GetName() + ".Access.Self.SetPassword")
						}
					}
					
				},
				IsCorrectPassword = function(!pw, ?targetUser)
				{
					if(targetUser == null)
					{
						if(user.HasRight(GetName() + ".Access.Self.CheckPassword"))
						{
							return user.IsCorrectPassword(pw)
						}
						else
						{
							WriteErrorMissingRight(user, GetName() + ".Access.Self.CheckPassword")
						}
					}
					else
					{
						if(user.GetUID() == targetUser.GetUID())
						{
							if(user.HasRight(GetName() + ".Access.Self.CheckPassword"))
							{
								return user.IsCorrectPassword(pw)
							}
							else
							{
								WriteErrorMissingRight(user, GetName() + ".Access.Self.CheckPassword")
							}
						}
						else if(user.HasRight(GetName() + ".Access.CheckPassword"))
						{
							return ResolveToInternalUser(targetUser).IsCorrectPassword(pw)
						}
						else
						{
							WriteErrorMissingRight(user, GetName() + ".Access.Self.CheckPassword")
						}
					}
					return null
				},
				HasRight = function(!right, ?targetUser)
				{
					if(targetUser == null)
					{
						if(user.HasRight(GetName() + ".Access.Self.CheckRight"))
						{
							return user.HasRight(right)
						}
						else
						{
							WriteErrorMissingRight(user, GetName() + ".Access.Self.CheckRight")
						}
					}
					else
					{
						if(user.GetUID() == targetUser.GetUID())
						{
							if(user.HasRight(GetName() + ".Access.Self.CheckRight"))
							{
								return user.HasRight(right)
							}
							else
							{
								WriteErrorMissingRight(user, GetName() + ".Access.Self.CheckRight")
							}
						}
						else if(user.HasRight(GetName() + ".Access.CheckRight"))
						{
							return ResolveToInternalUser(targetUser).HasRight(right)	
						}
						else
						{
							WriteErrorMissingRight(user, GetName() + ".Access.Self.CheckRight")
						}
					}
					return null
				},
				AddRight = function(!right, ?targetUser)
				{
					if(targetUser == null)
					{
						if(user.HasRight(GetName() + ".Access.Self.AddRight"))
						{
							user.AddRight(right)
						}
						else
						{
							WriteErrorMissingRight(user, GetName() + ".Access.Self.AddRight")
						}
					}
					else
					{
						if(user.GetUID() == targetUser.GetUID())
						{
							if(user.HasRight(GetName() + ".Access.Self.AddRight"))
							{
								user.AddRight(right)
							}
							else
							{
								WriteErrorMissingRight(user, GetName() + ".Access.Self.AddRight")
							}
						}
						else if(user.HasRight(GetName() + ".Access.AddRight"))
						{
							ResolveToInternalUser(targetUser).AddRight(right)	
						}
						else
						{
							WriteErrorMissingRight(user, GetName() + ".Access.Self.AddRight")
						}
					}
				},
				SetName = function(!name, ?targetUser)
				{
					if(targetUser == null)
					{
						if(user.HasRight(GetName() + ".Access.Self.SetName"))
						{
							user.SetName(name)
						}
						else
						{
							WriteErrorMissingRight(user, GetName() + ".Access.Self.SetName")
						}
					}
					else
					{
						if(user.GetUID() == targetUser.GetUID())
						{
							if(user.HasRight(GetName() + ".Access.Self.SetName"))
							{
								user.SetName(right)
							}
							else
							{
								WriteErrorMissingRight(user, GetName() + ".Access.Self.SetName")
							}
						}
						else if(user.HasRight(GetName() + ".Access.SetName"))
						{
							ResolveToInternalUser(targetUser).SetName(right)	
						}
						else
						{
							WriteErrorMissingRight(user, GetName() + ".Access.Self.SetName")
						}
					}
				}
			}
			return t
		}

		function GetPublicInterface()
		{
			t = base.GetPublicInterface()
			t.GetAccessRight = GetAccessRight
			t.NameToUID = _UserManager.NameToUID
			t.UIDToName = _UserManager.UIDToName
			t.AddUser = AddUser
			t.GetUser = GetUser
			t.GetRoot = function()
			{
				if(_DisableRootAccess)
				{
					Environment.Error("Access Forbidden")
					return null
				}
				else
				{
					return GetRootUser()
				}
			}
			return t
		}

	}
}