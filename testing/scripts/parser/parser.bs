string = environment.loadInterface("string", {})


function findClosing(a, index, open, close)
{
	level = 1

	while(1)
	{
		if(index >= string.length(a))
		{
			error("Expected " + close)
		}
		if(string.charAt(a, index) == open)
		{
			level = level + 1
		}
		else if(string.charAt(a, index) == close)
		{
			level = level - 1
		}


		if(level == 0)
		{
			break
		}

		index = index + 1
	}
	return index
}

function isWordBegin(c)
{
	return c == "_" || string.isLetter(c)
}

function isWordMiddle(c)
{
	return isWordBegin(c) || string.isDigit(c)
}

function isSequence(a, index, seq)
{
	aLen = string.length(a) - index
	sLen = string.length(seq)

	if(aLen < sLen)
	{
		return 0
	}

	for i = 0 while< sLen
	{
		if(isChar(a, index + i, string.charAt(seq, i)) == 0)
		{
			return 0
		}
	}
	return 1
}

function readString(a, index)
{
	if(isWordBegin(string.charAt(a, index)) == 0)
	{
		error("Can not parse Word at: "+ index)
	}
	while(1)
	{
		if(isWordMiddle(string.charAt(a, index)) == 0)
		{
			break
		}
		index = index + 1
	}
	return index
}

function eatString(a, index, str)
{
	l = string.length(str)

	end = index + l
	for i = index while< end
	{
		char = string.charAt(str, i - index)
		eat(a, i, char)
	}

	return index + l
}

function eatEmpty(a, index)
{
	while(1)
	{
		if(index >= string.length(a))
		{
			return string.length(a)
		}
		char = string.charAt(a, index)
		
		if(string.isWhiteSpace(char) == 0)
		{
			break
		}
		index = index + 1
	}
	return index
}

function isChar(a, index, char)
{
	return string.charAt(a, index) == char
}

function eat(a, index, char)
{
	if(string.charAt(a, index) != char)
	{
		error(string.format("Expected '{0}' but got '{1}'", char, string.charAt(a, index)))
	}
	return (index + 1)
}

function eatBlock(a, index)
{
	index = index + 1
	end = findClosing(a, index, "{", "}")
	return end
}


function parseBlock(block)
{
	exprs = []
	blockLen = string.length(block)
	index = 0
	while(index < blockLen)
	{
		index = parseExpression(block, index, exprs)
	}
	return exprs
}

function parseExpression(a, index, exprs)
{
	expr = {}

	if(isSequence(a, index, "function"))
	{
		expr.type = "function"

		index = index + 8 //"function".Length
		index = eatEmpty(a, index)
		if(isChar(a, index, "("))
		{
			error("Can not convert unnamed function")
		}
		else
		{
			nameStart = index
			index = readString(a, index)
			nameEnd = index
			expr.name = string.substr(a, nameStart, nameEnd - nameStart)
		}
		index = eatEmpty(a, index)

		argsOpen = index + 1
		index = findClosing(a, argsOpen, "(", ")")
		argsClose = index

		expr.args = string.substr(a, argsOpen, argsClose - argsOpen)

		index = eatEmpty(a, index)
		
		exprs.add(expr)
		return index
	}
	else
	{
		expr.type = "property"
		nameStart = index
		index = readString(a, index)
		nameEnd = index
		expr.name = string.substr(a, nameStart, nameEnd - nameStart)
		expr.value = string.substr(a, nameEnd)
		exprs.add(expr)
		return index
	}
}